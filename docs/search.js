window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "nori_ui", "modulename": "nori_ui", "qualname": "", "type": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "nori_ui.example", "modulename": "nori_ui.example", "qualname": "", "type": "module", "doc": "<p>Launch window.</p>\n"}, {"fullname": "nori_ui.example.get_args", "modulename": "nori_ui.example", "qualname": "get_args", "type": "function", "doc": "<p>Get the args from argparse.</p>\n\n<p>Returns:\n    args (dict): Arguments from argparse.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.example.launch_window", "modulename": "nori_ui.example", "qualname": "launch_window", "type": "function", "doc": "<p>Launch the Nori instance.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.examples", "modulename": "nori_ui.examples", "qualname": "", "type": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "nori_ui.examples.example_ui", "modulename": "nori_ui.examples.example_ui", "qualname": "", "type": "module", "doc": "<p>Example UI.</p>\n\n<p>This is used both to test changes to functionality and styling as well as a\nbasic reference for working with widgets.</p>\n"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI", "type": "class", "doc": "<p>QWidget(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, f: PySide6.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> None</p>\n"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.__init__", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.__init__", "type": "function", "doc": "<p>Init.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.init_UI", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.init_UI", "type": "function", "doc": "<p>Initialize the UI.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_title_label", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_title_label", "type": "function", "doc": "<p>Create the title label.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_line_edit", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_line_edit", "type": "function", "doc": "<p>Create the line edit.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_check_box_group", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_check_box_group", "type": "function", "doc": "<p>Create the group containing the checkboxes.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_radio_button_group", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_radio_button_group", "type": "function", "doc": "<p>Create the group containing the radio buttons.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_combo_box", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_combo_box", "type": "function", "doc": "<p>Create the editable combo box with some items.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_text_box_group", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_text_box_group", "type": "function", "doc": "<p>Create a text box with some sample text.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_slider", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_slider", "type": "function", "doc": "<p>Create a slider.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_spin_box", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_spin_box", "type": "function", "doc": "<p>Create a spin box.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_tabbed_layout", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_tabbed_layout", "type": "function", "doc": "<p>Create a tabbed section with a few tabs containing widgets.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_list_tab", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_list_tab", "type": "function", "doc": "<p>Create the tab with a list widget.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_tree_tab", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_tree_tab", "type": "function", "doc": "<p>Create the tab with a tree widget.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_table_tab", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_table_tab", "type": "function", "doc": "<p>Create the tab with a table widget.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_custom_widgets_tab", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_custom_widgets_tab", "type": "function", "doc": "<p>Create the tab with the custom widgets.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_line", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_line", "type": "function", "doc": "<p>Create a horizontal line.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_progress_bar", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_progress_bar", "type": "function", "doc": "<p>Create a progress bar.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_buttons", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_buttons", "type": "function", "doc": "<p>Create the buttons.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_dialog", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_dialog", "type": "function", "doc": "<p>Create a dialog.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.create_error_dialog", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.create_error_dialog", "type": "function", "doc": "<p>Create an error dialog.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.open_file_dialog", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.open_file_dialog", "type": "function", "doc": "<p>Create a file dialog.</p>\n\n<p>Returns:\n    dialog (QtWidgets.QFileDialog): File dialog.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.examples.example_ui.ExampleUI.staticMetaObject", "modulename": "nori_ui.examples.example_ui", "qualname": "ExampleUI.staticMetaObject", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.examples.example_ui.create_example", "modulename": "nori_ui.examples.example_ui", "qualname": "create_example", "type": "function", "doc": "<p>Create the example widget.</p>\n\n<p>Args:\n    default (bool): Whether or not to show the example widget within a\n        Nori Window.\n        Default is False (use the Nori Window).\n    from_file (bool): Whether or not to load the central widget from a\n        file or use the notmal example.\n        Default is False (use the normal example).\n    style (str): The name of the stylesheet to use.\n        If nothing is provided, a default is used.\n        'none' can also be provided to not apply any styling.\n            In the case of a child window, it will inherit the parents\n            style and palette.\n    palette (str): The name of the palette to use.\n        If none is provided, a default is used.</p>\n\n<p>Returns:\n    mw (Nori): Nori window.</p>\n", "parameters": ["default", "from_file", "style", "palette"], "funcdef": "def"}, {"fullname": "nori_ui.exceptions", "modulename": "nori_ui.exceptions", "qualname": "", "type": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "nori_ui.exceptions.exceptions", "modulename": "nori_ui.exceptions.exceptions", "qualname": "", "type": "module", "doc": "<p>Custom Exceptions.</p>\n"}, {"fullname": "nori_ui.exceptions.exceptions.NoriConfigError", "modulename": "nori_ui.exceptions.exceptions", "qualname": "NoriConfigError", "type": "class", "doc": "<p>Used when a config cannot be found.</p>\n"}, {"fullname": "nori_ui.init", "modulename": "nori_ui.init", "qualname": "", "type": "module", "doc": "<p>Globals.</p>\n"}, {"fullname": "nori_ui.log", "modulename": "nori_ui.log", "qualname": "", "type": "module", "doc": "<p>Logging.</p>\n"}, {"fullname": "nori_ui.nori", "modulename": "nori_ui.nori", "qualname": "", "type": "module", "doc": "<p>Unified Window Class.</p>\n"}, {"fullname": "nori_ui.nori.Nori", "modulename": "nori_ui.nori", "qualname": "Nori", "type": "class", "doc": "<p>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> None</p>\n"}, {"fullname": "nori_ui.nori.Nori.__init__", "modulename": "nori_ui.nori", "qualname": "Nori.__init__", "type": "function", "doc": "<p>Initialize the window.</p>\n\n<p>Args:\n    parent (QObject): The parent application, window, widget, etc.\n    central_widget (QWidget or .ui file path):\n        The widget to set as the central widget.\n        If using a .ui file path, provide a string. The .ui file should\n        load a QWidget, not a window.\n    icon (str): The name of the icon to set for the window.\n    title (str): The title of the window.\n    show_status_bar (bool): Whether or not to show the status bar.\n        If False, messages sent to the status bar will be ignored.\n    as_popup (bool): Whether of not to make this window a popup.\n        As a popup, the window becomes modal and will not have a menu\n        bar or status bar.\n    center (bool): Whether or not to center the window.\n    style (str): The name of the stylesheet to use.\n        If nothing is provided, a default is used.\n        'none' can also be provided to not apply any styling.\n            In the case of a child window, it will inherit the parents\n            style and palette.\n    palette (str): The name of the palette to use.\n        If none is provided, a default is used.\n    on_open (function): Function to run when the window opens.\n    on_close (function): Function to run when the window closes.\n    refresh (function): Function to run when \"File\" -> \"Refresh\" is\n        clicked. If nothing is provided, the \"Refresh\" item is not\n        created.\n    help_link (str): The URL of the Confluence page for the\n        application.\n    fonts (list): List of font families to load.</p>\n", "parameters": ["self", "parent", "central_widget", "icon", "title", "show_status_bar", "as_popup", "center", "style", "palette", "on_open", "on_close", "refresh", "help_link", "fonts"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.DEFAULT_ICON", "modulename": "nori_ui.nori", "qualname": "Nori.DEFAULT_ICON", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.nori.Nori.DEFAULT_TITLE", "modulename": "nori_ui.nori", "qualname": "Nori.DEFAULT_TITLE", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.nori.Nori.PACKAGE_CONFIG", "modulename": "nori_ui.nori", "qualname": "Nori.PACKAGE_CONFIG", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.nori.Nori.set_window_icon", "modulename": "nori_ui.nori", "qualname": "Nori.set_window_icon", "type": "function", "doc": "<p>Set the window icon.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.keyPressEvent", "modulename": "nori_ui.nori", "qualname": "Nori.keyPressEvent", "type": "function", "doc": "<p>Check for certain keys being pressed and act on them.</p>\n\n<p>Override of built in keyPressEvent.</p>\n", "parameters": ["self", "event"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.add_dock_panel", "modulename": "nori_ui.nori", "qualname": "Nori.add_dock_panel", "type": "function", "doc": "<p>Add a dockable panel to the main window.</p>\n\n<p>Args:\n    widget (QWidget): Any object that inherits QWidget.\n    position (str): Position for the docked widget.\n        Can be 'top', 'right', 'bottom', or 'left'.\n        Default is 'right'.\n    title (str): The title of the dock.\n    floating (bool): Whether the widget is floating.</p>\n", "parameters": ["self", "widget", "position", "title", "floating"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.remove_dock_panel", "modulename": "nori_ui.nori", "qualname": "Nori.remove_dock_panel", "type": "function", "doc": "<p>Remove a dockable panel based on name.</p>\n\n<p>Args:\n    title (str): Name of the panel to remove.</p>\n\n<p>Returns:\n    (bool): Whether or not the panel was successfully removed.</p>\n", "parameters": ["self", "title"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.add_menu_bar", "modulename": "nori_ui.nori", "qualname": "Nori.add_menu_bar", "type": "function", "doc": "<p>Add a menu bar to the window.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.add_file_menu", "modulename": "nori_ui.nori", "qualname": "Nori.add_file_menu", "type": "function", "doc": "<p>Add the default File menu and associated actions.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.get_menus", "modulename": "nori_ui.nori", "qualname": "Nori.get_menus", "type": "function", "doc": "<p>Get all the menus in the menu bar.</p>\n\n<p>Returns:\n    menu_items (list): A list of menus.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.add_menu", "modulename": "nori_ui.nori", "qualname": "Nori.add_menu", "type": "function", "doc": "<p>Add a menu to the given parent.</p>\n\n<p>Args:\n    name (str): Name of the menu to add.\n    actions (list): List of actions to add.</p>\n\n<p>Returns:\n    menu (QMenu): The created menu with its actions</p>\n", "parameters": ["self", "name", "actions"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.add_menu_actions", "modulename": "nori_ui.nori", "qualname": "Nori.add_menu_actions", "type": "function", "doc": "<p>Add menu actions to the given menu.</p>\n\n<p>Args:\n    menu (QMenu): The menu to add an action to.\n    actions (list): A list of QActions or 'seperators'.</p>\n", "parameters": ["self", "menu", "actions"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.create_refresh_action", "modulename": "nori_ui.nori", "qualname": "Nori.create_refresh_action", "type": "function", "doc": "<p>Create the refresh menu action.</p>\n\n<p>Returns:\n    action (QAction): The refresh action.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.create_help_action", "modulename": "nori_ui.nori", "qualname": "Nori.create_help_action", "type": "function", "doc": "<p>Create the help menu action.</p>\n\n<p>Returns:\n    action (QAction): The help action.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.create_close_action", "modulename": "nori_ui.nori", "qualname": "Nori.create_close_action", "type": "function", "doc": "<p>Create the close menu action.</p>\n\n<p>Returns:\n    action (QAction): The close action.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.get_help", "modulename": "nori_ui.nori", "qualname": "Nori.get_help", "type": "function", "doc": "<p>Open a browser window to the help page.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.remove_menu", "modulename": "nori_ui.nori", "qualname": "Nori.remove_menu", "type": "function", "doc": "<p>Remove a menu from the window.</p>\n\n<p>Args:\n    name (str): Menu name to remove.</p>\n", "parameters": ["self", "name"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.display_status_message", "modulename": "nori_ui.nori", "qualname": "Nori.display_status_message", "type": "function", "doc": "<p>Display a message in the status bar.</p>\n\n<p>Possible statuses:\ndefault: No background color\nsuccess: Green background\nwarning: Yellow background\nerror: Red background</p>\n\n<p>Args:\n    message (str): Message to display.\n    status (str): Status of the message bar (used for coloring).</p>\n\n<p>Returns:\n    result (bool): Whether or not the message was successfully\n        displayed.</p>\n", "parameters": ["self", "message", "status"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.closeEvent", "modulename": "nori_ui.nori", "qualname": "Nori.closeEvent", "type": "function", "doc": "<p>Cleanup when the window closes.</p>\n\n<p>Args:\n    event (QEvent): Event triggeting the close.</p>\n", "parameters": ["self", "event"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.load_fonts", "modulename": "nori_ui.nori", "qualname": "Nori.load_fonts", "type": "function", "doc": "<p>Load any custom fonts.</p>\n\n<p>Once the font is loaded, you can set it through:\n    font = QFont(\"FONT_FAMILY\", SIZE, FLAGS)\n    OBJECT.setFont(font)\nEg.\n    font = QFont(\"Cousine\", 24)\n    self.setFont(font)</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.nori.Nori.staticMetaObject", "modulename": "nori_ui.nori", "qualname": "Nori.staticMetaObject", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.presets", "modulename": "nori_ui.presets", "qualname": "", "type": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "nori_ui.presets.dialogs", "modulename": "nori_ui.presets.dialogs", "qualname": "", "type": "module", "doc": "<p>Dialog template.</p>\n"}, {"fullname": "nori_ui.presets.dialogs.NDialog", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog", "type": "class", "doc": "<p>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> None</p>\n"}, {"fullname": "nori_ui.presets.dialogs.NDialog.__init__", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog.__init__", "type": "function", "doc": "<p>Create a dialog based on Nori.</p>\n\n<p>Args:\n    parent (QObject): The parent object.\n    title (str): The title of the dialog.\n    message_icon (str): The name of the icon to use with the message.\n    message (str): Message to display in the dialog.\n    widget (QWidget): A custom widget to add to the dialog.\n    style (str): The name of the stylesheet to use.\n        If nothing is provided, a default is used.\n        'none' can also be provided to not apply any styling.\n            In the case of a child window, it will inherit the parents\n            style and palette.\n    palette (str): The name of the palette to use.\n        If none is provided, a default is used.</p>\n\n<p>Returns:\n    None</p>\n", "parameters": ["self", "parent", "title", "message_icon", "message", "widget", "style", "palette"], "funcdef": "def"}, {"fullname": "nori_ui.presets.dialogs.NDialog.DEFAULT_MESSAGE_ICON", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog.DEFAULT_MESSAGE_ICON", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.presets.dialogs.NDialog.create_dialog", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog.create_dialog", "type": "function", "doc": "<p>Create the dialog.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.presets.dialogs.NDialog.add_dialog_widget", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog.add_dialog_widget", "type": "function", "doc": "<p>Add the user-defined widget to the dialog.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.presets.dialogs.NDialog.add_ok_button", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog.add_ok_button", "type": "function", "doc": "<p>Add the 'OK' button.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.presets.dialogs.NDialog.ok_button_clicked", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog.ok_button_clicked", "type": "function", "doc": "<p>Close the window when the 'OK' button is clicked.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.presets.dialogs.NDialog.staticMetaObject", "modulename": "nori_ui.presets.dialogs", "qualname": "NDialog.staticMetaObject", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.presets.dialogs.NErrorDialog", "modulename": "nori_ui.presets.dialogs", "qualname": "NErrorDialog", "type": "class", "doc": "<p>QMainWindow(self, parent: Optional[PySide6.QtWidgets.QWidget] = None, flags: PySide6.QtCore.Qt.WindowFlags = Default(Qt.WindowFlags)) -> None</p>\n"}, {"fullname": "nori_ui.presets.dialogs.NErrorDialog.__init__", "modulename": "nori_ui.presets.dialogs", "qualname": "NErrorDialog.__init__", "type": "function", "doc": "<p>Create an error dialog based on the MDialog class.</p>\n", "parameters": ["self", "parent", "title", "message", "failure_message"], "funcdef": "def"}, {"fullname": "nori_ui.presets.dialogs.NErrorDialog.create_error_widget", "modulename": "nori_ui.presets.dialogs", "qualname": "NErrorDialog.create_error_widget", "type": "function", "doc": "<p>Create the error widget.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.presets.dialogs.NErrorDialog.staticMetaObject", "modulename": "nori_ui.presets.dialogs", "qualname": "NErrorDialog.staticMetaObject", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.utils", "modulename": "nori_ui.utils", "qualname": "", "type": "module", "doc": "<p>Utilities for the base window UI.</p>\n"}, {"fullname": "nori_ui.utils.get_application_window", "modulename": "nori_ui.utils", "qualname": "get_application_window", "type": "function", "doc": "<p>Get the top level window for the current application.</p>\n\n<p>Returns:\n    (QWidget): The main window of the application.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_app_instance", "modulename": "nori_ui.utils", "qualname": "get_app_instance", "type": "function", "doc": "<p>Get the application instance if one exists.</p>\n\n<p>Returns:\n    (QApplication): The application instance or None</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.create_app_instance", "modulename": "nori_ui.utils", "qualname": "create_app_instance", "type": "function", "doc": "<p>Create an app instance.</p>\n\n<p>Returns:\n    (QApplication): The application instance.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_icons_path", "modulename": "nori_ui.utils", "qualname": "get_icons_path", "type": "function", "doc": "<p>Return the directory containing the icons.</p>\n\n<p>Returns:\n    icons_path (str): Path to the icons folder.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_styles_path", "modulename": "nori_ui.utils", "qualname": "get_styles_path", "type": "function", "doc": "<p>Return the directory containing the styles.</p>\n\n<p>Returns:\n    styles_path (str): Path to the styles folder.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_palettes_path", "modulename": "nori_ui.utils", "qualname": "get_palettes_path", "type": "function", "doc": "<p>Return the directory containing the palettes.</p>\n\n<p>Returns:\n    palettes_path (str): Path to the palettes folder.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_style", "modulename": "nori_ui.utils", "qualname": "get_style", "type": "function", "doc": "<p>Get the data from the stylesheet.</p>\n\n<p>Args:\n    style (str): The path to or name of a style file.</p>\n\n<p>Returns:\n    style (str): The stylesheet data.</p>\n", "parameters": ["style"], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_palette", "modulename": "nori_ui.utils", "qualname": "get_palette", "type": "function", "doc": "<p>Get the data from the pallette.</p>\n\n<p>Args:\n    palette (str): The path to or name of a palette file.</p>\n\n<p>Returns:\n    palettes (list): The palette data.</p>\n", "parameters": ["palette"], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_stylesheet", "modulename": "nori_ui.utils", "qualname": "get_stylesheet", "type": "function", "doc": "<p>Parse the stylesheet with the palette.</p>\n\n<p>Args:\n    style (str): Name of the style\n    palette (str): Name of the palette</p>\n\n<p>Return:\n    stylesheet (str): The stylesheet to apply to the UI</p>\n", "parameters": ["style", "palette"], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_package_config", "modulename": "nori_ui.utils", "qualname": "get_package_config", "type": "function", "doc": "<p>Return the package config.</p>\n\n<p>Returns:\n    (dict): The package config.</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.find_fonts", "modulename": "nori_ui.utils", "qualname": "find_fonts", "type": "function", "doc": "<p>Find fonts based on the given folder and given families.</p>\n\n<p>If not folder is given, look for fonts locally.\nIf no families are given, look for all valid fonts.</p>\n\n<p>Args:\n    font_folder (str): Path to a folder containing font files.\n    families (list): List of font names.</p>\n\n<p>Returns:\n    fonts_to_load (list): A list of the font files to load.</p>\n", "parameters": ["font_folder", "families"], "funcdef": "def"}, {"fullname": "nori_ui.utils.load_local_fonts", "modulename": "nori_ui.utils", "qualname": "load_local_fonts", "type": "function", "doc": "<p>Load local fonts.</p>\n\n<p>If no families are given, look for all valid fonts.</p>\n\n<p>Args:\n    families (list): List of font names.</p>\n\n<p>Returns:\n    fonts_to_load (list): A list of the font files to load.</p>\n", "parameters": ["families"], "funcdef": "def"}, {"fullname": "nori_ui.utils.load_custom_fonts", "modulename": "nori_ui.utils", "qualname": "load_custom_fonts", "type": "function", "doc": "<p>Load all the custom fonts found in the given folder.</p>\n\n<p>This adds the fonts to the QFontDatabase to be used later.</p>\n\n<p>It is recommended that you load each family seperately.</p>\n\n<p>Args:\n    font_folder (str): Path to a folder containing font files.\n    families (list): List of font names.</p>\n\n<p>Returns:\n    font_ids (list): A list of the added font ids.</p>\n", "parameters": ["font_folder", "families"], "funcdef": "def"}, {"fullname": "nori_ui.utils.load_custom_font", "modulename": "nori_ui.utils", "qualname": "load_custom_font", "type": "function", "doc": "<p>Load a custom font from a file.</p>\n\n<p>This adds the font to the QFontDatabase to be used later.</p>\n\n<p>Args:\n    font_file (str): Path to a font file.</p>\n\n<p>Returns:\n    font_id (int): The id of the font.</p>\n", "parameters": ["font_file"], "funcdef": "def"}, {"fullname": "nori_ui.utils.move_to_center", "modulename": "nori_ui.utils", "qualname": "move_to_center", "type": "function", "doc": "<p>Move the window to the center of the screen.</p>\n\n<p>Args:\n    window (QMainWindow or any QWidget): Any object that inherits QWidget</p>\n", "parameters": ["window"], "funcdef": "def"}, {"fullname": "nori_ui.utils.calculate_center", "modulename": "nori_ui.utils", "qualname": "calculate_center", "type": "function", "doc": "<p>Calculate the center point of the active monitor.</p>\n\n<p>Returns:\n    screen_center (QPoint): (center x position, center y position)</p>\n", "parameters": [], "funcdef": "def"}, {"fullname": "nori_ui.utils.find_icon", "modulename": "nori_ui.utils", "qualname": "find_icon", "type": "function", "doc": "<p>Get the path for an icon if it exists based on the name.</p>\n\n<p>Args:\n    icon_name (str): Name of the icon.</p>\n\n<p>Returns:\n    icon_path (str) or None: Path to the icon.</p>\n", "parameters": ["icon_name"], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_pixmap", "modulename": "nori_ui.utils", "qualname": "get_pixmap", "type": "function", "doc": "<p>Get the icon if it exists from the name as a QPixmap.</p>\n\n<p>Args:\n    icon_name (str): Name of the icon.</p>\n\n<p>Returns:\n    (QPixmap) or None: Icon based on the name.</p>\n", "parameters": ["icon_name"], "funcdef": "def"}, {"fullname": "nori_ui.utils.get_icon", "modulename": "nori_ui.utils", "qualname": "get_icon", "type": "function", "doc": "<p>Get the icon if it exists from the name as a QIcon.</p>\n\n<p>Args:\n    icon_name (str): Name of the icon.</p>\n\n<p>Returns:\n    (QIcon) or None: Icon based on the name.</p>\n", "parameters": ["icon_name"], "funcdef": "def"}, {"fullname": "nori_ui.utils.load_widget_from_file", "modulename": "nori_ui.utils", "qualname": "load_widget_from_file", "type": "function", "doc": "<p>Load a widget from a .ui file.</p>\n\n<p>Args:\n    path (str): Path to the .ui file.</p>\n\n<p>Returns:\n    widget (QWidget) or None: The widget built from the file.\n        If the file can't be loaded, returns None.</p>\n", "parameters": ["path"], "funcdef": "def"}, {"fullname": "nori_ui.widgets", "modulename": "nori_ui.widgets", "qualname": "", "type": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "nori_ui.widgets.switch", "modulename": "nori_ui.widgets.switch", "qualname": "", "type": "module", "doc": "<p>Switch Widget.</p>\n"}, {"fullname": "nori_ui.widgets.switch.Switch", "modulename": "nori_ui.widgets.switch", "qualname": "Switch", "type": "class", "doc": "<p>QSlider(self, orientation: PySide6.QtCore.Qt.Orientation, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None\nQSlider(self, parent: Optional[PySide6.QtWidgets.QWidget] = None) -> None</p>\n"}, {"fullname": "nori_ui.widgets.switch.Switch.__init__", "modulename": "nori_ui.widgets.switch", "qualname": "Switch.__init__", "type": "function", "doc": "<p>Init.</p>\n\n<p>Args:\n    parent (QObject): The parent object.\n    type (str): The type of switch.\n        Can either be 'round' (default) or 'square'.</p>\n\n<p>Returns:\n    None</p>\n", "parameters": ["self", "type"], "funcdef": "def"}, {"fullname": "nori_ui.widgets.switch.Switch.VALID_SWITCH_TYPES", "modulename": "nori_ui.widgets.switch", "qualname": "Switch.VALID_SWITCH_TYPES", "type": "variable", "doc": "<p></p>\n"}, {"fullname": "nori_ui.widgets.switch.Switch.on_slider_change", "modulename": "nori_ui.widgets.switch", "qualname": "Switch.on_slider_change", "type": "function", "doc": "<p>Change the slider position based on the interaction.</p>\n\n<p>If the slider is clicked on, snap the slider to the opposite side.\nIf the slider is moved, snap the slider to the nearest edge.</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.widgets.switch.Switch.get_state", "modulename": "nori_ui.widgets.switch", "qualname": "Switch.get_state", "type": "function", "doc": "<p>Return the state of the switch.</p>\n\n<p>The switch can only be at maximum or minimum values.</p>\n\n<p>Args:\n    None</p>\n\n<p>Returns:\n    state (bool): True if the switch is \"on\" (at maximum value),\n        otherwise False (at minimum value).</p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "nori_ui.widgets.switch.Switch.staticMetaObject", "modulename": "nori_ui.widgets.switch", "qualname": "Switch.staticMetaObject", "type": "variable", "doc": "<p></p>\n"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.addField("qualname");
            this.addField("fullname");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();